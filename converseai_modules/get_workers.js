/**
 * @file get_workers.js
 * @description Get all workers in your ADP account. 
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.Module.ModuleResponse;
const adp = require('../lib/adp');
const util = require('../lib/util');

module.exports = async (app, body) => {
  const data = body.payload.registrationData.app;

  const auth = await adp.auth(data)
  .catch(err => {
    console.error(err);
    return util.handleError(app, err);
  });

  if (!auth) {
    return app.fail({ httpStatus: 400, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' }); 
  }

  const response = new ModuleResponse();

  let workersArray;

  const workers = await adp.getWorkers(auth, data);

  workersArray = [].concat(workers.workers);

  const pages = [...Array(Math.ceil(workers.meta.totalNumber / 100)).keys()];

  const promises = pages.map(i => {
    return adp.getWorkers(auth, data, 100 * (i + 1))
  })

  const allRespones = await Promise.all(promises);

  const allWorkers = [].concat(workersArray, allRespones.map(o => o.workers).flat());

  const userMap = new Map();

  for (const worker of allWorkers) {
    if (worker) {
      if (worker.businessCommunication.emails) {
        userMap.set(worker.workerID.idValue, worker.businessCommunication.emails[0].emailUri);
      }
    }
  }

  const result = allWorkers.filter(i => {
    return i != null;
  }).map(worker => {
    if (worker.workAssignments && worker.workAssignments[0] && worker.workAssignments[0].reportsTo && worker.workAssignments[0].reportsTo[0]) {
      worker.workAssignments[0].reportsTo[0].workerID.emailUri = userMap.get(worker.workAssignments[0].reportsTo[0].workerID.idValue);
    }

    return worker;
  });

  response.setValue({ result });

  return app.send(Status.SUCCESS, response);
};
